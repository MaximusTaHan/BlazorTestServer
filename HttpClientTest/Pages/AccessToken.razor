@page "/access"
@using HttpClientTest.Controller
@using System.Timers
@using HttpClientTest.Models
@using System.Net.Http.Headers
@using Microsoft.AspNetCore.WebUtilities
@using System.Text.Json
@inject IHttpClientFactory _clientFactory


<h2>Test timer</h2>

@if (string.IsNullOrWhiteSpace(tokenTracker.errorString) == false)
{
    // if there was an issue getting data
    <div class ="h2">@tokenTracker.errorString</div>
}
else if (tokenTracker.responseInfo is null)
{
    // while waiting for data 
    <div class ="h4">Loading...</div>
}
else
{
    //display data in tables
    <table class="table table-striped">
        <thead class="thead-dark">
            <tr>
                <th></th>
                <th>Token type</th>
                <th>Expires in</th>
                <th>Refresh token</th>
                <th>Access token</th>
            </tr>
        </thead>
        <tbody>
                <tr>
                    <td>@tokenTracker.responseInfo.Scope</td>
                    <td>@tokenTracker.responseInfo.Token_type</td>
                    <td>@tokenTracker.responseInfo.Expires_in</td>
                    <td>@tokenTracker.responseInfo.Refresh_token</td>
                    <td>@tokenTracker.responseInfo.Access_token</td>
                </tr>
        </tbody>
    </table>
}

@if (string.IsNullOrWhiteSpace(errorString) == false)
{
    // if there was an issue getting data
    <div class ="h2">@errorString</div>
}
else if (departures is null)
{
    // while waiting for data 
    <div class ="h4">Loading departures...</div>
}
else
{
    //display data in tables
    <table class="table table-striped">
        <thead class="thead-dark">
            <tr>
                <th>Buss</th>
                <th>Time</th>
                <th>Direction</th>
                <th>Accessibility</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var w in objDepartures.departureBoard.Departure)
            {
                <tr>
                    <td>@w.Name</td>
                    <td>@w.Time</td>
                    <td>@w.Direction</td>
                    <td>@w.Accessibility</td>
                    <td>@w.BgColor</td>
                </tr>
            }
        </tbody>
    </table>
}
@code {
    
    TokenTracker tokenTracker = new TokenTracker();
    Root objDepartures;
    string departures;
    string errorString;
    protected override async Task OnInitializedAsync()
    {
        await tokenTracker.RetrievePost(_clientFactory);
        var query = new Dictionary<string,string>()
            {
                ["id"] = "9021014005421000",
                ["date"] = DateTime.Now.ToString("yyyy/MM/dd"),
                ["time"] = DateTime.Now.ToString("HH:mm"),
                ["format"] = "json",
            };

        var uri = QueryHelpers.AddQueryString("https://api.vasttrafik.se/bin/rest.exe/v2/departureBoard", query);
        var request = new HttpRequestMessage(HttpMethod.Get, uri);
        request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", tokenTracker.responseInfo.Access_token);
        var client = _clientFactory.CreateClient();
        HttpResponseMessage response = await client.SendAsync(request);
        
        
        if(response.IsSuccessStatusCode)
        {
            departures = await response.Content.ReadAsStringAsync();
            objDepartures = JsonSerializer.Deserialize<Root>(departures);
            errorString = null;
        }
        else
        {
            errorString = $"There was an error getting our departures: { response.ReasonPhrase }";
        } 
        StartTimer();



    }
    private System.Timers.Timer _timer;

    private void StartTimer()
    {
        _timer = new System.Timers.Timer(1000);
        _timer.Elapsed += CountDownTimer;
        _timer.Enabled = true;
    }
    public void CountDownTimer(Object source, ElapsedEventArgs e)
    {
        if (tokenTracker.responseInfo.Expires_in > 0)
        {
            tokenTracker.responseInfo.Expires_in--;
            InvokeAsync(() => StateHasChanged());
        }
        else
        {
            _timer.Enabled = false;
            TimerElapsedHandler();
        }
    }
    private async void TimerElapsedHandler()
    {
        await tokenTracker.RetrievePost(_clientFactory);
        StartTimer();
    }
}